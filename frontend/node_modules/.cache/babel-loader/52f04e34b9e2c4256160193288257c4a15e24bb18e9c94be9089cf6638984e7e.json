{"ast":null,"code":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst mongoose = require(\"mongoose\");\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded());\napp.use(cors());\nmongoose.connect(\"mongodb://localhost:27017/testdb\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}, () => {\n  console.log(\"DB connected\");\n});\nconst userSchema = new mongoose.Schema({\n  fname: String,\n  lname: String,\n  email: String,\n  password: String\n});\nconst User = new mongoose.model(\"User\", userSchema);\n\n//Routes\napp.post(\"/login\", (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  //check email\n  User.findOne({\n    email: email\n  }, (err, user) => {\n    if (user) {\n      //check password\n      if (password === user.password) {\n        res.send({\n          message: \"Login successfully\",\n          user: user\n        });\n      } else {\n        res.send({\n          message: \"Password and confirm password didn't match\"\n        });\n      }\n    } else {\n      res.send({\n        message: \"Please login to proceed\"\n      });\n    }\n  });\n});\napp.post(\"/signup\", (req, res) => {\n  const {\n    fname,\n    lname,\n    email,\n    password\n  } = req.body;\n  //check email\n  User.findOne({\n    email: email\n  }, (err, user) => {\n    if (user) {\n      res.send({\n        message: \"User is already registerd\"\n      });\n    } else {\n      const user = new User({\n        fname,\n        lname,\n        email,\n        password\n      });\n      user.save(err => {\n        if (err) {\n          res.send(err);\n        } else {\n          res.send({\n            message: \"Account has been created!! Please Login\"\n          });\n        }\n      });\n    }\n  });\n  // res.send(\"register\");\n  //   console.log(req.body);\n});\n\napp.listen(8000, () => {\n  console.log(\"Server starting at 8000\");\n});","map":{"version":3,"names":["express","require","cors","mongoose","app","use","json","urlencoded","connect","useNewUrlParser","useUnifiedTopology","console","log","userSchema","Schema","fname","String","lname","email","password","User","model","post","req","res","body","findOne","err","user","send","message","save","listen"],"sources":["C:/Users/Rushikesh Patil/OneDrive/Desktop/Task_Manager-Django_React-main/Task_Manager-Django_React-main/frontend/src/login.js"],"sourcesContent":["\r\nconst express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(express.urlencoded());\r\napp.use(cors());\r\n\r\nmongoose.connect(\r\n  \"mongodb://localhost:27017/testdb\",\r\n  {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n  },\r\n  () => {\r\n    console.log(\"DB connected\");\r\n  }\r\n);\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  fname: String,\r\n  lname: String,\r\n  email: String,\r\n  password: String,\r\n});\r\n\r\nconst User = new mongoose.model(\"User\", userSchema);\r\n\r\n//Routes\r\napp.post(\"/login\", (req, res) => {\r\n  const { email, password } = req.body;\r\n  //check email\r\n  User.findOne({ email: email }, (err, user) => {\r\n    if (user) {\r\n      //check password\r\n      if (password === user.password) {\r\n        res.send({ message: \"Login successfully\", user: user });\r\n      } else {\r\n        res.send({ message: \"Password and confirm password didn't match\" });\r\n      }\r\n    } else {\r\n      res.send({ message: \"Please login to proceed\" });\r\n    }\r\n  });\r\n});\r\n\r\napp.post(\"/signup\", (req, res) => {\r\n  const { fname, lname, email, password } = req.body;\r\n  //check email\r\n  User.findOne({ email: email }, (err, user) => {\r\n    if (user) {\r\n      res.send({ message: \"User is already registerd\" });\r\n    } else {\r\n      const user = new User({\r\n        fname,\r\n        lname,\r\n        email,\r\n        password,\r\n      });\r\n      user.save((err) => {\r\n        if (err) {\r\n          res.send(err);\r\n        } else {\r\n          res.send({ message: \"Account has been created!! Please Login\" });\r\n        }\r\n      });\r\n    }\r\n  });\r\n  // res.send(\"register\");\r\n  //   console.log(req.body);\r\n});\r\n\r\napp.listen(8000, () => {\r\n  console.log(\"Server starting at 8000\");\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}